@model ASimpleAnalogueScaling.InputQuery

@{
    ViewBag.Title = "Calculate";
}





<h2>Calculate</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@ViewBag.Message</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ScaledMin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScaledMin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ScaledMin, "", new { @class = "text-danger" })
                <span id="helpBlock" class="help-block">A block of help text that breaks onto a new line and may extend beyond one line.</span>
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ScaledMax, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScaledMax, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ScaledMax, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RawMin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RawMin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RawMin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RawMax, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RawMax, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RawMax, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ScaledInput, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScaledInput, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ScaledInput, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.RawInput, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RawInput, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RawInput, "", new { @class = "text-danger" })
            </div>
        </div>

      

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Calculate" class="btn btn-default" />
            </div>
        </div>
    </div>

   

    <div class="form-group">
        <div class="col-md-10">
            <p id="result">
                The Scaling details are as below:
            </p>

            <ul>
                <li>The rate is: @ViewBag.Rate</li>
                <li>The offset is: @ViewBag.Offset</li>
                <li>The result for an input @ViewBag.Current is : @ViewBag.RawResult @ViewBag.ScaledResult</li>
            </ul>
                
        </div>
    </div>


   

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
