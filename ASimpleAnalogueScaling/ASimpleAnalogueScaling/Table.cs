//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASimpleAnalogueScaling
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations; //Added

    public partial class Table
    {
        public int QueryId { get; set; }
        [Display(Name ="Scaled Minimum",Description = "Please get this from your instrument spec")]
        [Required(ErrorMessage="Please provide a Scaled Minimun value Eg: 100 psi or -20C")]
        public Nullable<float> ScaledMin { get; set; }


        [Required(ErrorMessage = "Please provide a Scaled Maximum value Eg: 500 psi or +100C")]
        [Display(Name = "Scaled Maximum", Description = "Please get this from your instrument spec")]
        public Nullable<float> ScaledMax { get; set; }

        [Display(Name = "Input Minimun", Description = "Eg 4mA or 0V")]
        public Nullable<float> IPCurrentMin { get; set; }

        [Display(Name = "Input Maximum", Description = "Eg 20mA or 10V")]
        public Nullable<float> IpCurrentMax { get; set; }

        [Display(Name = "Raw minimum value", Description = "Eg 0 for intial value of raw data")]
        public Nullable<decimal> RawMin { get; set; }
        [Required(ErrorMessage = "Please provide a Raw Maximum value for your Analog Card Eg: 1024 for 2^10 Please get this from your Analog card spec")]
        [Display(Name = "Raw maximum value", Description = "Eg 1024 based on the resolusion of the analog card")]
        public Nullable<decimal> RawMax { get; set; }

        
        private float? rate;
        public float? Rate
        {
                get
                {

                float? rate = ((this.ScaledMax - this.ScaledMin)/(this.IpCurrentMax - this.IPCurrentMin));
               // float? offset =this.ScaledMin -(this.IPCurrentMin*rate);
                return rate;
                }
                set
                {
                    this.rate = value;
                }
            
            
        }
    }
}
